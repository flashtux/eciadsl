#!/bin/sh
# ************************************************************************
# *                                                                      *
# *      makeconfig v0.6 - ECI Linux driver configuration script         *
# *                        by FlashCode and Crevetor (c) 14/04/2002      *
# *                                                                      *
# *          For any support, contact one of us :                        *
# *           - FlashCode: flashcode@free.fr  http://flashcode.free.fr   *
# *           - Crevetor : ziva@caramail.com                             *
# *                                                                      *
# *      Parameters for this script :                                    *
# *        1  = mode                                                     *
# *        2  = username + domain (username@domain)                      *
# *        3  = password (given by provider)                             *
# *        4  = path to pppoeci (eg: /usr/local/bin/pppoeci)             *
# *        5  = DNS 1 (depends on provider, 0 or "" = skipped)           *
# *        6  = DNS 2 (depends on provider, 0 or "" = skipped)           *
# *        7  = VPI (depends on provider)                                *
# *        8  = VCI (depends on provider)                                *
# *        9  = VID/PID before synchro (example: 05472131 for ECI modem) *
# *        10 = VID/PID after synchro  (example: 09158000 for ECI modem) *
# *        11 = path to a synch .bin                                     *
# *        11 = path to a firmware .bin                                  *
# *                                                                      *
# ************************************************************************

function backup()
{
	if [ -f "$1" ]; then
	    backupfile="$1.bak"
	    num=0
	    while [ -s "$backupfile" ]
	    do
	        num=`expr $num + 1`
	        backupfile="$1.bak$numero"
	    done
        echo -n "backing up $1 to $backupfile.. "
        cp -f "$1" "$backupfile"
		test $? -ne 0 && exit 255
        echo "OK"
	fi
}

# <CONFIG>
BIN_DIR="/usr/local/bin"
ETC_DIR="/etc"
CONF_DIR="/etc/eciadsl"
PPPD_DIR="/etc/ppp"
VERSION=""
# </CONFIG>

if [ "$1" == "--version" -o "$1" == "-v" ]; then
	echo "$VERSION"
	exit 0
fi

#
# check parameters
#

if [ $UID -ne 0 ]; then
    echo -e "\nerror: you must be root in order to run this script."
    exit 255
fi

if [ $# -ne 12 ]; then
    echo -e "\nerror: invalid number of parameters."
    echo -e "syntax:\n  makeconfig <mode> <username> <password> </path/to/pppoeci> <dns1> <dns2> <vpi> <vci> <vidpid1> <vidpid2> <path_bin> <firmware_bin>"
    exit 1
fi

mode="$1"
username="$2"
password="$3"
pppoeci="$4"
dns1="$5"
dns2="$6"
vpi="$7"
vci="$8"
synch="${11}"
firmware="${12}"
vid1=`echo $9 | cut -c 1-4`
pid1=`echo $9 | cut -c 5-8`
vid2=`echo ${10} | cut -c 1-4`
pid2=`echo ${10} | cut -c 5-8`
test -z "$synch" && synch="$CONF_DIR/synch01.bin"
test -z "$firmware" && firmware="$CONF_DIR/firmware00.bin"

if [ ! -f "$pppoeci" -o ! -x "$pppoeci" ]; then
    echo "error: $pppoeci is not a valid executable"
    exit 1
fi

TMPFILE="/tmp/${0##*/}.tmp"
RET=0

#
# backup and create resolv.conf
#

resolvconf="$ETC_DIR/resolv.conf"
if [ "$dn1" != "0" -o "$dn2" != "0" ]; then
	if [ -n "$dn1$dns2" ]; then

		backup "$resolvconf"

    	echo -n "creating $resolvconf.."
		:> "$resolvconf"
		if [ "$dn1" != "0" -a -n "$dn1" ]; then
	    	echo "nameserver $dn1" >> "$resolvconf"
		fi
		if [ "$dn2" != "0" -a -n "$dn2" ]; then
	    	echo "nameserver $dn2" >> "$resolvconf"
		fi
    	echo "OK"
	fi
fi

#
# create or backup/modify "chap-secrets" and "pap-secrets"
#

for auth in "chap" "pap"; do
    secretfile="$PPPD_DIR/$auth-secrets"

    if [ -s $secretfile ]; then

		backup "$secretfile"

        echo -n "modifying $secretfile.. "
		TMP=$(echo "$username" | sed "s/\\\/\\\\\\\\\\\/g")
		grep -v -E "^[ \t]*\"?$TMP\"?[ \t]*.*" $backupfile > "$secretfile"
        echo -e "\"$username\"\t*\t\"$password\"\t*" >>"$secretfile"
        echo "OK"
    else
        echo -n "creating $secretfile.. "
        echo "# Secrets for authentication using $auth" > "$secretfile"
        echo -e "\"$username\"\t*\t\"$password\"\t*" >> "$secretfile"
        echo "OK"
    fi
done

#
# create or backup/modify "adsl" script
#

pppdconffile="$PPPD_DIR/peers/adsl"
if [ -s $pppdconffile ]; then

	backup "$pppdconffile"

    echo -n "modifying $pppdconffile.. "
	TMP=$(echo "$pppoeci" | sed "s/\//\\\\\//g")
	echo "s/^pty .\+/pty \\\"$TMP -vpi $vpi -vci $vci -vendor 0x$vid2 -product 0x$pid2 -mode $mode\\\"/" > $TMPFILE
	TMP=$(echo "$username" | sed "s/\//\\\\\//g")
	echo "s/^user .\+/user \\\"$TMP\\\"/" >> $TMPFILE
	sed -f $TMPFILE "$backupfile" > "$pppdconffile"

	if [ -s "$pppdconffile" ]; then
	    echo "OK"
	else
		echo -e "\nfailed to set up $pppdconffile"
		echo -e "this is a bug, please report this to us, and join your $backupfile file\n"
		RET=1
	fi
else
    echo -n "creating $pppdconffile.. "
    cat << EOFADSL > "$pppdconffile"
# 12/04/2001 Benoit PAPILLAULT <benoit.papillault@free.fr>
# 08/05/2001 Updated. Added "novj" & removed "kdebug 7"
# 07/02/2002 Replace "maxfail 0" by "maxfail 10"
# 29/04/2002 Added the option "linkname" to easily locate the running pppd
#
# This file could be rename but its place is under /etc/ppp/peers
# To connect to Internet using this configuration file, type
# pppd call adsl, where "adsl" stands for the name of this file

debug
kdebug 1
noipdefault
defaultroute
pty "$pppoeci -vpi $vpi -vci $vci -vendor 0x$vid2 -product 0x$pid2 -mode $mode"
sync
user "$username"
noaccomp
nopcomp
noccp
novj
holdoff 10

# This will store the pid of pppd in the first line of /var/run/ppp-eciadsl.pid
# and the interface created (like ppp0) on the second line.
linkname eciadsl

# maxfail is the number of times pppd retries to execute pppoeci after
# an error. If you put 0, pppd retries forever, filling up the process table
# and thus, making the computer unusable.
maxfail 10

usepeerdns
noauth

# If your PPP peer answer to LCP EchoReq (lcp-echo requests), you can
# use the lcp-echo-failure to detect disconnected links with:
#
# lcp-echo-interval 600
# lcp-echo-failure 10
#
# However, if your PPP peer DOES NOT answer to lcp-echo request, you MUST
# desactivate this feature with the following line
#
lcp-echo-interval 0

# You may need the following, but ONLY as a workaround
# mtu 1432

persist
EOFADSL
    echo "OK"
fi

#
# create eciadsl.conf file
#

conffile="$CONF_DIR/eciadsl.conf"
if [ -f "$conffile" ]; then

	backup "$conffile"

	echo -n "updating $conffile.."
	echo "^[ \t]*VID1[ \t]*=.*//g" > "$TMPFILE"
	echo "^[ \t]*PID1[ \t]*=.*//g" >> "$TMPFILE"
	echo "^[ \t]*VID2[ \t]*=.*//g" >> "$TMPFILE"
	echo "^[ \t]*PID2[ \t]*=.*//g" >> "$TMPFILE"
	echo "^[ \t]*MODE[ \t]*=.*//g" >> "$TMPFILE"
	echo "^[ \t]*FIRMWARE[ \t]*=.*//g" >> "$TMPFILE"
	echo "^[ \t]*SYNCH[ \t]*=.*//g" >> "$TMPFILE"
	sed -f "$TMPFILE" "$conffile"
else
	echo -n "updating $conffile.."
	:> "$conffile"
fi
cat << EOFCONF >> "$conffile"
VID1=$vid1
PID1=$pid1
VID2=$vid2
PID2=$pid2
MODE=$mode
FIRMWARE=$firmware
SYNCH=$synch
EOFCONF
echo "OK"

rm -f "$TMPFILE"
exit $RET
